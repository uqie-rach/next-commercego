generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid()) @map("_id")
  name          String
  email         String    @unique
  emailVerified DateTime? @default(now())
  password      String?
  image         String?   @default("imageurl")
  role          String    @default("user")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[] // Relasi ke akun OAuth
  sessions Session[] // Relasi ke session

  profile UserProfile? // Relasi ke UserProfile
  article Article[] // Relasi ke Article
}

model UserProfile {
  id        String  @id @default(cuid()) @map("_id")
  userId    String  @unique
  phone     String? @default("+62")
  duty      String? @default("member")
  bio       String? @default("bio")
  location  String? @default("your location")
  linkedin  String? @default("https://www.linkedin.com")
  github    String? @default("https://www.github.com")
  twitter   String? @default("https://www.twitter.com")
  instagram String? @default("https://www.instagram.com")
  website   String? @default("https://www.google.com")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  userId       String
  sessionToken String   @unique
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(cuid()) @map("_id")
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Article {
  id        String   @id @default(uuid()) @map("_id")
  title     String
  content   Json
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
